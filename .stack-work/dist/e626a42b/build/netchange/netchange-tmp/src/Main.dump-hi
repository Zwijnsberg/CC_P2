
==================== FINAL INTERFACE ====================
2019-12-10 15:46:19.5254657 UTC

interface main:Main 8065
  interface hash: b859088466b7abbc3ab09ea2a8b7d61e
  ABI hash: 77eb802cb759c852bfd41495ae4ab62e
  export-list hash: 2caeba6afdb0df0c0e1f650eeb2da403
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: bf6f75ea28bc625d96c47ec95a75dc90
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.closeCLients
  Main.closeClients
  Main.connectSocket
  Main.createClient
  Main.createClients
  Main.handleCommandLine
  Main.handleConnection
  Main.listenForCommandLine
  Main.listenForConnections
  Main.main
  Main.parseCommand
  Main.portToAddress
  Main.readCommandLineArguments
  Main.sendMessage
  Main.Command{Main.Disconnect Main.Make Main.Send Main.Show Main.Unknown}
  Main.Entry{Main.Entry}
  Main.Port{Main.Local Main.Port}
  Main.RoutingTable{Main.Table}
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0 ghc-prim-0.5.3
                      integer-gmp-1.0.2.0 network-2.8.0.1 split-0.2.3.3 stm-2.5.0.0
orphans: stm-2.5.0.0:Control.Monad.STM
         network-2.8.0.1:Network.Socket base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:GHC.Exts base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Control.Concurrent db627a2e14aa77645810b5e18852cc54
import  -/  base-4.12.0.0:Control.Exception 68d632685955b01899aa782b05b79cdf
import  -/  base-4.12.0.0:Control.Exception.Base 520b7537fcce27638136bb16d9a55e53
import  -/  base-4.12.0.0:Control.Monad 54356f938d3817a0115f506fce4f2fa3
import  -/  base-4.12.0.0:Data.Either 3f22662ea029dfb63e64f318274cbbbd
import  -/  base-4.12.0.0:Data.Foldable bdeac546b12282c8986759606b9295a5
import  -/  base-4.12.0.0:Data.IORef 9fe6be300ad920563b6d0585952c3155
import  -/  base-4.12.0.0:GHC.Base fbe365a916ebeeeb4bc1f895dbe83e42
import  -/  base-4.12.0.0:GHC.Conc.IO e5574a04330387198d27d33dfb992cd8
import  -/  base-4.12.0.0:GHC.Conc.Sync fae6c83841bcf1584e2587725f53d9ce
import  -/  base-4.12.0.0:GHC.Err 3a680f55541fe399f95f794018fc3593
import  -/  base-4.12.0.0:GHC.IO.Exception 99271e07ec0e09b76d45c79794dad266
import  -/  base-4.12.0.0:GHC.IO.Handle 5b3f689b082eee6e7562e9b58323b91a
import  -/  base-4.12.0.0:GHC.IO.Handle.FD 5b13f4cf43b26c3d52e20458852a8546
import  -/  base-4.12.0.0:GHC.IO.Handle.Text 2ca19f0c4c6b23c3ad9d1464d36c5281
import  -/  base-4.12.0.0:GHC.IO.Handle.Types b0667350495b7969f4b13a8e9686d1b4
import  -/  base-4.12.0.0:GHC.IO.IOMode 64e15bc6e405c4ae814493543509e7ab
import  -/  base-4.12.0.0:GHC.Real 3b42f3125c1d17d4e4b4437a3c97310f
import  -/  base-4.12.0.0:GHC.Show fa6032f3f820e8e8ec87b97bdca4e160
import  -/  base-4.12.0.0:Prelude 80c668cb99fbafebd524c5e897f8c982
import  -/  base-4.12.0.0:System.Environment 045df705c1f205b31d24a0f6340ea2db
import  -/  base-4.12.0.0:System.IO 51ffc52e2e8495d5c7b596557cf2be89
import  -/  base-4.12.0.0:Text.Read 580457154dc9d710b792a13b428d58dd
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  network-2.8.0.1:Network.Socket cccb3c178b1f8d4043b518ed5f994246
import  -/  network-2.8.0.1:Network.Socket.Types 8885d0583783d86ae72c97c90ee0757a
import  -/  split-0.2.3.3:Data.List.Split fc97935e6cac56009831c8e28df2e836
import  -/  split-0.2.3.3:Data.List.Split.Internals 2517e71aba717632497689d6cc755804
import  -/  stm-2.5.0.0:Control.Concurrent.STM c418f6f5d5174c7fcc2a4eb1734356a3
import  -/  stm-2.5.0.0:Control.Concurrent.STM.TMVar 96daa725c7835d707a2de8b139407500
d95255b097b3c212d8c82b7ee8b88755
  $fShowCommand :: GHC.Show.Show Main.Command
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Command
                  Main.$fShowCommand_$cshowsPrec
                  Main.$fShowCommand_$cshow
                  Main.$fShowCommand_$cshowList -}
0f941c8af9883a34532208d6f90e62e3
  $fShowCommand1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowCommand2) -}
dcd3811eee840057de79bcd8a6690f5e
  $fShowCommand10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Show"#) -}
5a52eb82612427c5e28a5c8a97a7af6b
  $fShowCommand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unknown"#) -}
ffe1d2e5e01cf43541df5078adbae81e
  $fShowCommand3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowCommand4) -}
76d7cd0cd0e399b7c1ba884b0d9c0bdd
  $fShowCommand4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Disconnect"#) -}
da0b55551ea0fdc511a13e796225c7e8
  $fShowCommand5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowCommand6) -}
412934c6107fac83d48dd303b280e008
  $fShowCommand6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Make"#) -}
16860ed6f98f79b5d92c682590a9e84e
  $fShowCommand7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowCommand8) -}
7f13c458141a0e24474d9064a0b4a85e
  $fShowCommand8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Send"#) -}
a91e5c823f6e2a8187b6ad1218d41bf0
  $fShowCommand9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowCommand10) -}
d95255b097b3c212d8c82b7ee8b88755
  $fShowCommand_$cshow :: Main.Command -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Command) ->
                 case x of wild {
                   Main.Show -> Main.$fShowCommand9
                   Main.Send -> Main.$fShowCommand7
                   Main.Make -> Main.$fShowCommand5
                   Main.Disconnect -> Main.$fShowCommand3
                   Main.Unknown -> Main.$fShowCommand1 }) -}
d95255b097b3c212d8c82b7ee8b88755
  $fShowCommand_$cshowList :: [Main.Command] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Command]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Command Main.$w$cshowsPrec ls s) -}
d95255b097b3c212d8c82b7ee8b88755
  $fShowCommand_$cshowsPrec ::
    GHC.Types.Int -> Main.Command -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Command)
                   (w2 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec w1 w2) -}
ebdbbe94a77a7cd9e89c3777af4934f7
  $tc'Disconnect :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2126008672286768630##
                   2653350885631699551##
                   Main.$trModule
                   Main.$tc'Disconnect2
                   0#
                   Main.$tc'Disconnect1) -}
41d6acefbefe95655bfa93a018906914
  $tc'Disconnect1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
0012549bdb14c7b64d654f70c4961660
  $tc'Disconnect2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Disconnect3) -}
74005539ab9b78da91d9ece6e3cfcf42
  $tc'Disconnect3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Disconnect"#) -}
3d9ff5eb7db86f039538fbefb97fae5b
  $tc'Entry :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10536894821330533580##
                   7639986618194784842##
                   Main.$trModule
                   Main.$tc'Entry2
                   0#
                   Main.$tc'Entry1) -}
50002a671ec4b91abe8d3db616ac34b4
  $tc'Entry1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c92e99e01bf7c694e7cad3716cee7f65
  $tc'Entry2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Entry3) -}
17a3345838e16add9b5d8a496262baeb
  $tc'Entry3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Entry"#) -}
cb9e9cc0d02b101b1e3869f5979714c2
  $tc'Local :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4844169562848602316##
                   4114398630298759787##
                   Main.$trModule
                   Main.$tc'Local2
                   0#
                   Main.$tc'Local1) -}
d14be1729680d761aca2449e924a5c28
  $tc'Local1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
acad5c2099fb35379866084a38043592
  $tc'Local2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Local3) -}
5869506f83e3c1273d6e394d81c7f931
  $tc'Local3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Local"#) -}
c1ad4f58476004b34ed1f8e73d9a865b
  $tc'Make :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2435271177776093200##
                   56626310089836070##
                   Main.$trModule
                   Main.$tc'Make1
                   0#
                   Main.$tc'Disconnect1) -}
40c75e22d354fe522126d3b609e88ed2
  $tc'Make1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Make2) -}
706dcd70e9c6db15645c732dffb97a3f
  $tc'Make2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Make"#) -}
e6da262f94a25d4ef2a56be0f4ec7b61
  $tc'Port :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13904678107524931756##
                   7079515989901353794##
                   Main.$trModule
                   Main.$tc'Port2
                   0#
                   Main.$tc'Port1) -}
4ad6b4c08cc44d759cbf69c36b2c67ad
  $tc'Port1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8746a432f933bae93153cf749428efc9
  $tc'Port2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Port3) -}
e4ccbf6ba9d3f4f0e418604c65074cc0
  $tc'Port3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Port"#) -}
817ed285ca3da2eb0b1ebdf67dea8f95
  $tc'Send :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14959434591910396574##
                   14141157089499995332##
                   Main.$trModule
                   Main.$tc'Send1
                   0#
                   Main.$tc'Disconnect1) -}
5be137e5890aac4c42614dd845dee876
  $tc'Send1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Send2) -}
d7b4f600da306202c48234ae8164f82a
  $tc'Send2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Send"#) -}
9d28c7592db367381f1abb85b80fd04b
  $tc'Show :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16703356357415717073##
                   4656575548904460909##
                   Main.$trModule
                   Main.$tc'Show1
                   0#
                   Main.$tc'Disconnect1) -}
72b732b864eef97b529a63cd3c98428e
  $tc'Show1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Show2) -}
7da557681c22e7a38166d0298cf80e50
  $tc'Show2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Show"#) -}
40f78f7b4b86706d8de7d96b1bbef782
  $tc'Table :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16219778146172991990##
                   9457094216153909365##
                   Main.$trModule
                   Main.$tc'Table2
                   0#
                   Main.$tc'Table1) -}
9a6ca67a5565e6dc69f06f6165b6d140
  $tc'Table1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f67a24f651528785ad557b97023d813f
  $tc'Table2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Table3) -}
539df1252a690961afe5f56ab4bbb7fd
  $tc'Table3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Table"#) -}
f313bda232347008b9c9b2ca3f976dce
  $tc'Unknown :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12759248698022228583##
                   17494832900761209096##
                   Main.$trModule
                   Main.$tc'Unknown1
                   0#
                   Main.$tc'Disconnect1) -}
e510f1b79104608aad542654382cf51a
  $tc'Unknown1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Unknown2) -}
0f9419656749ccf92b87cf81ddfd0592
  $tc'Unknown2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Unknown"#) -}
05cea2d12a7449e8e0e902cc75943370
  $tcCommand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4438336884874269529##
                   16506562571577361575##
                   Main.$trModule
                   Main.$tcCommand1
                   0#
                   GHC.Types.krep$*) -}
3556be56ab3360e0ceb278aaaf009f1f
  $tcCommand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCommand2) -}
ea0ac3253b18be721b13de9e994a4054
  $tcCommand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Command"#) -}
019ce0c45fb0b95ce8f232e3c2aa916a
  $tcEntry :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13773081838080184667##
                   15380524626820505111##
                   Main.$trModule
                   Main.$tcEntry1
                   0#
                   GHC.Types.krep$*) -}
9655646a7cbfddc5b21d6fa429a3c368
  $tcEntry1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcEntry2) -}
94778bf5634ad0ac063933b02de3f81b
  $tcEntry2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Entry"#) -}
6eb3fef1c72a5803495a84320c9377b9
  $tcPort :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9192141787432555120##
                   6439954912773716986##
                   Main.$trModule
                   Main.$tcPort1
                   0#
                   GHC.Types.krep$*) -}
24d0bc156e752fa240946a33ca73f0fa
  $tcPort1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcPort2) -}
8e2680f49f8b938fd10cf55f89733b06
  $tcPort2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Port"#) -}
1ccfb0cc3f0ed2dc858d47b197b44c12
  $tcRoutingTable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15033175088903907392##
                   3943779983317467845##
                   Main.$trModule
                   Main.$tcRoutingTable1
                   0#
                   GHC.Types.krep$*) -}
0d89e3d8848ce4d19dd619dc64a589ce
  $tcRoutingTable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcRoutingTable2) -}
2aae30ff5cc6774cd3be5e767dd7eb65
  $tcRoutingTable2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RoutingTable"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
d95255b097b3c212d8c82b7ee8b88755
  $w$cshowsPrec :: Main.Command -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (w :: Main.Command) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Main.Show -> GHC.Base.++ @ GHC.Types.Char Main.$fShowCommand9 w1
                   Main.Send -> GHC.Base.++ @ GHC.Types.Char Main.$fShowCommand7 w1
                   Main.Make -> GHC.Base.++ @ GHC.Types.Char Main.$fShowCommand5 w1
                   Main.Disconnect
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fShowCommand3 w1
                   Main.Unknown
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fShowCommand1 w1 }) -}
396cad16b73d8176f59a0e3a0c427447
  $whandleCommandLine ::
    Main.Command -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: Main.Command) (ww1 :: GHC.Base.String) ->
                 GHC.IO.Handle.Text.hPutStr'
                   GHC.IO.Handle.FD.stdout
                   (case ww of wild {
                      Main.Show
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowCommand9
                           (GHC.CString.unpackAppendCString# Main.handleCommandLine1 ww1)
                      Main.Send
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowCommand7
                           (GHC.CString.unpackAppendCString# Main.handleCommandLine1 ww1)
                      Main.Make
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowCommand5
                           (GHC.CString.unpackAppendCString# Main.handleCommandLine1 ww1)
                      Main.Disconnect
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowCommand3
                           (GHC.CString.unpackAppendCString# Main.handleCommandLine1 ww1)
                      Main.Unknown
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowCommand1
                           (GHC.CString.unpackAppendCString# Main.handleCommandLine1 ww1) })
                   GHC.Types.True) -}
3b2800cbb89deca358718e8b771a539a
  $wlistenForConnections ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U(U)><S,U><L,U><L,U(U)><S,U><S,U>,
     Inline: [2] -}
e84444a2ac2b5d24b33f0e113678fd51
  $wparseCommand ::
    GHC.Base.String -> (# Main.Command, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 case GHC.Base.map
                        @ (Data.List.Split.Internals.Chunk GHC.Types.Char)
                        @ [GHC.Types.Char]
                        (Data.List.Split.Internals.fromElem @ GHC.Types.Char)
                        (Data.List.Split.Internals.$wpostProcess
                           @ GHC.Types.Char
                           Data.List.Split.Internals.Drop
                           Data.List.Split.Internals.KeepBlankFields
                           Data.List.Split.Internals.KeepBlank
                           Data.List.Split.Internals.KeepBlank
                           (Data.List.Split.Internals.splitInternal
                              @ GHC.Types.Char
                              Main.parseCommand10
                                `cast`
                              (Sym (Data.List.Split.Internals.N:Delimiter[0] <GHC.Types.Char>_R))
                              w)) of wild {
                   []
                   -> case Main.parseCommand9
                      ret_ty (# Main.Command, GHC.Base.String #)
                      of {}
                   : head rest
                   -> case GHC.Base.eqString head Main.parseCommand7 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString head Main.parseCommand5 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString head Main.parseCommand3 of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Base.eqString head Main.parseCommand1 of wild4 {
                                       GHC.Types.False
                                       -> (# Main.Unknown, Main.parseCommand_go rest #)
                                       GHC.Types.True
                                       -> (# Main.Show, Main.parseCommand_go rest #) }
                                  GHC.Types.True -> (# Main.Send, Main.parseCommand_go rest #) }
                             GHC.Types.True -> (# Main.Make, Main.parseCommand_go rest #) }
                        GHC.Types.True
                        -> (# Main.Disconnect, Main.parseCommand_go rest #) } }) -}
d95255b097b3c212d8c82b7ee8b88755
  data Command = Show | Send | Make | Disconnect | Unknown
c87551c66fd80b8fcf6c026574b0aefb
  data Entry = Entry Main.Port GHC.Types.Int Main.Port
d5aa09457ed9876101dc8e30e2ab8f77
  data Port = Port GHC.Types.Int | Local
342c640d523712d4f7e23fad609436d8
  data RoutingTable
    = Table [Control.Concurrent.STM.TMVar.TMVar Main.Entry]
d809ec03707f892886f11234b31276d2
  closeCLients :: GHC.Base.Monad m => [a] -> m ()
  {- Arity: 2, Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ m :: * -> * @ a ($dMonad :: GHC.Base.Monad m) (ds :: [a]) ->
                 case ds of wild {
                   [] -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.()
                   : ipv ipv1 -> Main.closeCLients3 @ m }) -}
d9f6fa1c8035917b8582cf75eebe5bcc
  closeCLients3 :: m ()
  {- Strictness: x -}
02802a82f485fa28906ef3504b906eea
  closeClients :: [GHC.IO.Handle.Types.Handle] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.closeClients1
                  `cast`
                (<[GHC.IO.Handle.Types.Handle]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
cd0a898df35d6c29120de15cc2071b3e
  closeClients1 ::
    [GHC.IO.Handle.Types.Handle]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: [GHC.IO.Handle.Types.Handle])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ds of wild {
                   []
                   -> case Main.closeClients2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : x xs
                   -> case GHC.IO.Handle.hClose1 x eta of ds1 { (#,#) ipv ipv1 ->
                      case xs of wild1 {
                        [] -> (# ipv, GHC.Tuple.() #)
                        : ipv2 ipv3
                        -> case Main.closeCLients3
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {} } } }) -}
debf1035f191674fd910fea8a8f10ee4
  closeClients2 :: GHC.Types.IO ()
  {- Strictness: x -}
7533cf25296ab8c9ebd9f598540c5631
  connectSocket ::
    GHC.Types.Int -> GHC.Types.IO Network.Socket.Types.Socket
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.connectSocket1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Network.Socket.Types.Socket>_R)) -}
d8ab3c77e9f9561971907727305449ed
  connectSocket1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Network.Socket.Types.Socket #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: (\ (portNumber :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   lvl22 :: Network.Socket.Types.PortNumber
                   = case portNumber of wild { GHC.Types.I# i ->
                     (GHC.Word.W16# (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# i)))
                       `cast`
                     (Sym (Network.Socket.Types.N:PortNumber[0])) }
                 } in
                 let {
                   lvl23 :: Network.Socket.Types.SockAddr
                   = Network.Socket.Types.SockAddrInet lvl22 Main.connectSocket4
                 } in
                 letrec {
                   connect' :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Network.Socket.Types.Socket #)
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case Network.Socket.$wsocket
                            Network.Socket.Types.AF_INET
                            Network.Socket.Types.Stream
                            0#
                            s of ds1 { (#,#) ipv ipv1 ->
                     case GHC.Prim.catch#
                            @ (Data.Either.Either GHC.IO.Exception.IOException ())
                            @ GHC.Exception.Type.SomeException
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                             case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                             case Network.Socket.$wconnect
                                    ww1
                                    ww7
                                    lvl23
                                    s1 of ds2 { (#,#) ipv2 ipv3 ->
                             (# ipv2,
                                Data.Either.Right
                                  @ GHC.IO.Exception.IOException
                                  @ ()
                                  ipv3 #) } } })
                            Main.connectSocket3
                            ipv of ds2 { (#,#) ipv2 ipv3 ->
                     case ipv3 of wild {
                       Data.Either.Left ds
                       -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                            GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                 GHC.Prim.realWorld# of wild1 { (#,#) ds3 ds4 ->
                          case ds4 of wild2 {
                            DEFAULT
                            -> case GHC.Conc.Windows.threadDelay1
                                      Main.connectSocket2
                                      ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                               connect' ipv4 }
                            0#
                            -> case GHC.Prim.delay#
                                      @ GHC.Prim.RealWorld
                                      1000000#
                                      ipv2 of s' { DEFAULT ->
                               connect' s' } } }
                       Data.Either.Right ds -> (# ipv2, ipv1 #) } } }
                 } in
                 connect' eta) -}
dc6f6668753ca0066c669f26657ae926
  connectSocket2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.I# 1000000#) -}
a2379cb75bc58c0bef6ab1f254976fd8
  connectSocket3 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.IO.Exception.IOException () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ (Data.Either.Either GHC.IO.Exception.IOException ())
                        wild
                        eta1
                   GHC.Types.True
                   -> (# eta1,
                         Data.Either.Left
                           @ GHC.IO.Exception.IOException
                           @ ()
                           e3
                             `cast`
                           (UnsafeCo representational e2 GHC.IO.Exception.IOException) #) } }) -}
46e3e70780a2c8ebce4f24d3826f00b1
  connectSocket4 :: Network.Socket.Types.HostAddress
  {- Unfolding: (case {__pkg_ccall network-2.8.0.1 GHC.Prim.Word#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Word# #)}
                        2130706433##
                        GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                 GHC.Word.W32# (GHC.Prim.narrow32Word# ds1) }) -}
f070775a3b480516a74e4617466eb4db
  createClient ::
    GHC.Types.Int -> GHC.Types.IO GHC.IO.Handle.Types.Handle
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.createClient1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.IO.Handle.Types.Handle>_R)) -}
a9621e7d21afb0aae67f7e09027ea347
  createClient1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.IO.Handle.Types.Handle #)
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: (\ (n :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         (GHC.CString.unpackAppendCString#
                            Main.createClient4
                            (case n of ww2 { GHC.Types.I# ww3 ->
                             case GHC.Show.$wshowSignedInt
                                    0#
                                    ww3
                                    (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                             GHC.Base.++_$s++ @ GHC.Types.Char Main.createClient2 ww5 ww6 } }))
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Main.connectSocket1 n ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Network.Socket.$wsocketToHandle
                   ww1
                   ww7
                   GHC.IO.IOMode.ReadWriteMode
                   ipv2 } } } }) -}
7d6f381e3cbf394e16809398ff1dadc3
  createClient2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.createClient3) -}
7710ceeccacf1890bf7f7b3ccaccebfe
  createClient3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("..."#) -}
ef69815a46ea43e8d254dbce9dd09e33
  createClient4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Connecting to neighbour "#) -}
9a9248bf697d82393fe0bcf6c7ce4d9c
  createClients ::
    [GHC.Types.Int] -> GHC.Types.IO [GHC.IO.Handle.Types.Handle]
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.createClients1
                  `cast`
                (<[GHC.Types.Int]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.IO.Handle.Types.Handle]>_R)) -}
c7895eff3cc15b3b36c56b75ca9e9f7f
  createClients1 ::
    [GHC.Types.Int]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [GHC.IO.Handle.Types.Handle] #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
9270810eed0e5f245f935f0cec1a33f8
  handleCommandLine ::
    (Main.Command, GHC.Base.String) -> GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Main.Command, GHC.Base.String)) ->
                 case w of ww { (,) ww1 ww2 ->
                 Main.$whandleCommandLine ww1 ww2 }) -}
b25fbe5158d5da026ff89ffdb4ee4aac
  handleCommandLine1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" "#) -}
3a3c09a2fc1e0aed0330c4d67bb5a4a7
  handleConnection :: Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*U(U(U),A,A,A,1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleConnection1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
77c1d6a35ed910ee7bc924f8ad8a5cb5
  handleConnection1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U(U(U),A,A,A,1*U(U))><S,U>,
     Unfolding: (\ (connection :: Network.Socket.Types.Socket)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.handleConnection5
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case connection of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wsocketToHandle
                        ww1
                        ww7
                        GHC.IO.IOMode.ReadWriteMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         ipv3
                         Main.handleConnection3
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        ipv3
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         (GHC.CString.unpackAppendCString# Main.handleConnection2 ipv7)
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 GHC.IO.Handle.hClose1 ipv3 ipv8 } } } } } } }) -}
b38e0c3bec80e6a49724cc3a8febb8b2
  handleConnection2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Incomming connection send a message: "#) -}
5885ae7db31178e9a66678f34628d1a9
  handleConnection3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.handleConnection4) -}
9953a42a0649449d2d1d2959913dfc23
  handleConnection4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Welcome"#) -}
d13cdedd278dc5c485d1a85822d3a111
  handleConnection5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.handleConnection6) -}
5fe782de231eed4eec13de6076e6e41f
  handleConnection6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Got new incomming connection"#) -}
1ffab612a2057da186a39a2bc083af03
  listenForCommandLine :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.listenForCommandLine1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
b203ca4108227ae5b4a3eac46d87b58f
  listenForCommandLine1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
46487653237ee9ad726eaac1f23873fa
  listenForConnections ::
    Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.listenForConnections1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7e636c888fb119501871032b377663c4
  listenForConnections1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),1*U(U))><S,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wlistenForConnections ww1 ww2 ww3 ww4 ww7 w1 } }) -}
b4f9ae97a091b232a88173a93240314d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
d1aad4e2ca70f343fb79319c91e02c09
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
ea164b5c86c552f5ec8d97390ff78d58
  parseCommand :: GHC.Base.String -> (Main.Command, GHC.Base.String)
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Main.$wparseCommand w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
df538a5f6720e155000d847c2eb66d67
  parseCommand1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.parseCommand2) -}
ec588f11317b8f2beb858a917651d27e
  parseCommand10 :: [GHC.Types.Char -> GHC.Types.Bool]
  {- Unfolding: (GHC.CString.unpackFoldrCString#
                   @ [GHC.Types.Char -> GHC.Types.Bool]
                   Main.parseCommand12
                   Main.parseCommand11
                   (GHC.Types.[] @ (GHC.Types.Char -> GHC.Types.Bool))) -}
2c693147a9237b083fec84a61a2f7720
  parseCommand11 ::
    GHC.Types.Char
    -> [GHC.Types.Char -> GHC.Types.Bool]
    -> [GHC.Types.Char -> GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><L,U>m2,
     Unfolding: (\ (x :: GHC.Types.Char)
                   (ys :: [GHC.Types.Char -> GHC.Types.Bool])[OneShot] ->
                 GHC.Types.:
                   @ (GHC.Types.Char -> GHC.Types.Bool)
                   (GHC.Classes.eqChar x)
                   ys) -}
4f39dc58f475d12ab11febae9c7d24ff
  parseCommand12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (";"#) -}
e46417b7da382fa2b8cdd2c9686307d7
  parseCommand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("show"#) -}
f93350bbbb93213feb0f109a1cea4197
  parseCommand3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.parseCommand4) -}
cabb100ad7310a74a0e7f1d8fcd75cd4
  parseCommand4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("send"#) -}
fc6d868611457eb61465c0700754a474
  parseCommand5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.parseCommand6) -}
bba4662baa3d648128abb97be06080f3
  parseCommand6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("make"#) -}
6e38f8cf18361c34e74de25b955d5f78
  parseCommand7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.parseCommand8) -}
b3bbfb3e9053fae2cd9954cb110065ec
  parseCommand8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("disc"#) -}
c1527bfe582bd3c937ef351366389553
  parseCommand9 :: ([GHC.Types.Char], [[GHC.Types.Char]])
  {- Strictness: x -}
ee8a52f177405194a282017e36831d58
  parseCommand_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
533e96c516e5fa52ef577e0083e00c56
  portToAddress :: GHC.Types.Int -> Network.Socket.Types.SockAddr
  {- Arity: 1, Strictness: <L,1*U(U)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (portNumber :: GHC.Types.Int) ->
                 Network.Socket.Types.SockAddrInet
                   (case portNumber of wild { GHC.Types.I# i ->
                    (GHC.Word.W16# (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# i)))
                      `cast`
                    (Sym (Network.Socket.Types.N:PortNumber[0])) })
                   Main.connectSocket4) -}
4cd25b90e6c7f534d1935ac7d2863516
  readCommandLineArguments ::
    GHC.Types.IO (GHC.Types.Int, [GHC.Types.Int])
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.readCommandLineArguments1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <(GHC.Types.Int, [GHC.Types.Int])>_R)) -}
944776ecefc7062dc95f9e160e51a11c
  readCommandLineArguments1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Int, [GHC.Types.Int]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   []
                   -> case Main.readCommandLineArguments6
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                (GHC.Types.Int, [GHC.Types.Int]) #)
                      of {}
                   : me neighbours
                   -> (# ipv,
                         (case Text.Read.readEither8
                                 @ GHC.Types.Int
                                 (Text.ParserCombinators.ReadP.run
                                    @ GHC.Types.Int
                                    Main.readCommandLineArguments5
                                    me) of wild1 {
                            [] -> Main.readCommandLineArguments4
                            : x ds
                            -> case ds of wild2 {
                                 [] -> x : ipv2 ipv3 -> Main.readCommandLineArguments3 } },
                          GHC.Base.map
                            @ [GHC.Types.Char]
                            @ GHC.Types.Int
                            Main.readCommandLineArguments2
                            neighbours) #) } }) -}
21aa7c9449609ca860fd13a52b048587
  readCommandLineArguments2 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither8
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           Main.readCommandLineArguments5
                           s) of wild {
                   [] -> Main.readCommandLineArguments4
                   : x ds
                   -> case ds of wild1 {
                        [] -> x : ipv ipv1 -> Main.readCommandLineArguments3 } }) -}
3b3720213d5658e840f033e1f60bc89b
  readCommandLineArguments3 :: GHC.Types.Int
  {- Strictness: x -}
0a71e1fb3d09b5ca404fce2f6d08bd51
  readCommandLineArguments4 :: GHC.Types.Int
  {- Strictness: x -}
1a9b2a7651aae67074874083a319a162
  readCommandLineArguments5 ::
    Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
01a25df3a1c9ef6b981d8c86c563cd75
  readCommandLineArguments6 ::
    GHC.Types.IO (GHC.Types.Int, [GHC.Types.Int])
  {- Strictness: x -}
dae41be1ef3eb5b712dc25c50154827b
  sendMessage ::
    GHC.IO.Handle.Types.Handle -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.IO.Handle.Text.hPutStrLn -}
instance GHC.Show.Show [Main.Command] = Main.$fShowCommand
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

